/*

143. Reorder List
Medium

Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example 1:

Given 1->2->3->4, reorder it to 1->4->2->3.

Example 2:

Given 1->2->3->4->5, reorder it to 1->5->2->4->3.

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        //Approach 1
        // reach the middle, reverse and reverse
        // Approach 2
        // use stack 
        // Approach 3
        // use a map
        if (head == null) return;
        ListNode slow = head, fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        
        ListNode reverseHead = reverse(slow.next);
        slow.next = null; // removes all the forward cycle
        while(head != null && reverseHead != null){
            ListNode tmp1 = head.next;
            ListNode tmp2 = reverseHead.next;
            reverseHead.next = head.next;
            head.next = reverseHead;
            head = tmp1;
            reverseHead = tmp2;
        }
        
    }
    private ListNode reverse(ListNode node){
        ListNode prev = null;
        ListNode curr = node;
        while(curr != null){
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        //Approach 1
        // reach the middle, reverse and reverse
        // Approach 2
        // use stack 
        // Approach 3
        // use a map
        if(head == null || head.next == null || head.next.next == null) return;
        ListNode slow = head, fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        Stack<ListNode> s = new Stack<>();
        ListNode slowCopy = slow;
        slow = slow.next;
        while(slow != null){
            s.push(slow);
            slow = slow.next;
        }
        slowCopy.next = null; //removes cyclic connection
        
        ListNode temp = head;
        while(!s.isEmpty()){
            ListNode t = temp.next;
            temp.next = s.pop();
            temp = temp.next;
            temp.next = t;
            temp = temp.next;
        }
    }
}
